import anf/codegen
import gig/closure
import gig/core
import gig/mono
import gleam/dict
import gleam/list
import gleam/string

pub fn module_headers(c: core.Context) {
  c.externals
  |> list.filter(fn(x) { !x.mono })
  |> list.group(fn(x) { x.module })
  |> dict.to_list()
  |> list.map(fn(entry) {
    let #(module_name, externals) = entry

    let externals =
      list.map(externals, fn(external) {
        let typ = mono.sub_type([], external.typ.typ)

        let params =
          list.map(external.parameters, fn(param) {
            mono.Field(param.name, mono.sub_type([], param.typ))
          })

        let external =
          mono.External(
            internal_name: external.internal_name,
            external_name: external.external_name,
            parameters: params,
            module: external.module,
            mono: external.mono,
            typ: typ,
          )
        external
      })
    let module = mono.init_context(c)
    let module = mono.Context(..module, externals:)

    let header =
      list.fold(externals, module, fn(c, external) {
        mono.instantiate_type(c, external.typ)
      })
      |> closure.cc_module
      |> codegen.compile_module_header

    let header =
      string.join(
        [
          "",
          "// This file is automatically generated.",
          "// Please do not edit it.",
          "",
          "#include \"builtin.h\"",
          "",
          header,
        ],
        "\n",
      )

    #(module_name, header)
  })
}

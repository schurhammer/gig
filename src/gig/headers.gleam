import gig/closure
import gig/codegen
import gig/core
import gig/mono
import gleam/dict
import gleam/list
import gleam/set
import gleam/string

pub fn module_headers(c: core.Context) {
  c.externals
  |> dict.to_list()
  |> list.filter(fn(x) { !{ x.1 }.mono })
  |> list.group(fn(x) { { x.1 }.module })
  |> dict.to_list()
  |> list.map(fn(entry) {
    let #(module_name, externals) = entry
    let module =
      mono.Context(
        in: c,
        out: core.Context(
          types: dict.new(),
          functions: dict.new(),
          externals: dict.from_list(externals),
        ),
        used_modules: set.new(),
      )
    let header =
      list.fold(externals, module, fn(c, external) {
        let external = external.1
        mono.instantiate_type(c, external.typ.typ)
      })
      |> closure.cc_module
      |> codegen.module_header

    let header =
      string.join(
        [
          "",
          "// This file is automatically generated.",
          "// Please do not edit it.",
          "",
          "#include \"builtin.h\"",
          "",
          header,
        ],
        "\n",
      )

    #(module_name, header)
  })
}
